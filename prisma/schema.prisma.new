generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(uuid())
  email    String  @unique
  username String  @unique
  password String
  name     String?
  avatar   String?
  bio      String?

  // Admin Role
  isAdmin Boolean  @default(false)
  role    UserRole @default(USER)

  // VIP Membership
  isVip     Boolean   @default(false)
  vipType   VipType?
  vipExpiry DateTime?

  // Heart System
  hearts Int @default(0)

  // Social Features
  followers Int @default(0)
  following Int @default(0)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  playlists      Playlist[]
  favorites      Favorite[]
  uploads        Upload[]
  heartCharges   HeartCharge[]
  sessions       Session[]
  passwordResets PasswordReset[]
  artistProfile  Artist?
  uploadedSongs  Song[]
}

model Artist {
  id         String  @id @default(uuid())
  userId     String? @unique
  name       String
  stageName  String?
  bio        String?
  avatar     String?
  coverImage String?
  genre      String?
  country    String?
  debutYear  Int?

  // Social Stats
  followers        Int @default(0)
  monthlyListeners Int @default(0)

  // Verification
  isVerified Boolean @default(false)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user         User?         @relation(fields: [userId], references: [id], onDelete: SetNull)
  albumArtists AlbumArtist[]
  songArtists  SongArtist[]
  videoArtists VideoArtist[]
}

model Album {
  id          String    @id @default(uuid())
  title       String
  description String?
  coverImage  String?
  releaseDate DateTime?
  genre       String?
  type        AlbumType @default(ALBUM)

  // Stats
  plays Int @default(0)
  likes Int @default(0)

  // Status
  isPublished Boolean @default(false)
  isApproved  Boolean @default(false)
  isFeatured  Boolean @default(false)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  artists   AlbumArtist[]
  songs     Song[]
  favorites Favorite[]
}

model Song {
  id          String    @id @default(uuid())
  title       String
  duration    Int?
  audioUrl    String?
  videoUrl    String?
  lyrics      String?
  genre       String?
  releaseDate DateTime?
  description String?
  language    String?

  // Media Files
  coverImage String?
  audioFile  String?
  videoFile  String?

  // Stats
  plays     Int @default(0)
  likes     Int @default(0)
  downloads Int @default(0)
  views     Int @default(0)

  // Status
  isPublished Boolean @default(false)
  isApproved  Boolean @default(false)
  isFeatured  Boolean @default(false)

  // Relations
  albumId String?
  album   Album?  @relation(fields: [albumId], references: [id], onDelete: SetNull)

  artists SongArtist[]

  uploadedById String?
  uploadedBy   User?   @relation(fields: [uploadedById], references: [id], onDelete: SetNull)

  videos Video[]

  favorites     Favorite[]
  playlistItems PlaylistItem[]
  uploads       Upload[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Video {
  id           String  @id @default(uuid())
  title        String
  description  String?
  videoUrl     String
  thumbnailUrl String?
  duration     Int?
  genre        String?
  language     String?

  views Int @default(0)
  likes Int @default(0)

  isPublished Boolean @default(false)
  isApproved  Boolean @default(false)
  isFeatured  Boolean @default(false)
  ageRating   String?

  songId String?
  song   Song?   @relation(fields: [songId], references: [id], onDelete: SetNull)

  artists VideoArtist[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VideoArtist {
  id       String @id @default(uuid())
  videoId  String
  artistId String
  role     String @default("Artist")

  video  Video  @relation(fields: [videoId], references: [id], onDelete: Cascade)
  artist Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)

  @@unique([videoId, artistId])
}

model AlbumArtist {
  id       String @id @default(uuid())
  albumId  String
  artistId String
  role     String @default("Artist")

  album  Album  @relation(fields: [albumId], references: [id], onDelete: Cascade)
  artist Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)

  @@unique([albumId, artistId])
}

model SongArtist {
  id       String @id @default(uuid())
  songId   String
  artistId String
  role     String @default("Artist")

  song   Song   @relation(fields: [songId], references: [id], onDelete: Cascade)
  artist Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)

  @@unique([songId, artistId, role])
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PasswordReset {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Upload {
  id          String    @id @default(uuid())
  userId      String
  title       String
  artist      String?
  album       String?
  genre       String?
  description String?
  type        MediaType

  cloudinaryId  String
  cloudinaryUrl String
  fileSize      Int
  duration      Int?

  plays Int @default(0)
  likes Int @default(0)

  isApproved Boolean   @default(false)
  approvedBy String?
  approvedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  favorites Favorite[]
  songId    String?
  song      Song?      @relation(fields: [songId], references: [id], onDelete: SetNull)
}

model Playlist {
  id          String  @id @default(uuid())
  userId      String
  title       String
  description String?
  isPublic    Boolean @default(true)
  coverImage  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items PlaylistItem[]
}

model PlaylistItem {
  id         String  @id @default(uuid())
  playlistId String
  songId     String?
  uploadId   String?
  position   Int

  playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  song     Song?    @relation(fields: [songId], references: [id], onDelete: Cascade)
}

model Favorite {
  id       String  @id @default(uuid())
  userId   String
  songId   String?
  albumId  String?
  uploadId String?

  createdAt DateTime @default(now())

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  song   Song?   @relation(fields: [songId], references: [id], onDelete: Cascade)
  album  Album?  @relation(fields: [albumId], references: [id], onDelete: Cascade)
  upload Upload? @relation(fields: [uploadId], references: [id], onDelete: Cascade)
}

model HeartCharge {
  id     String          @id @default(uuid())
  userId String
  type   HeartChargeType
  amount Int
  reason String?

  paymentMethod String?
  paymentAmount Int?

  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  MODERATOR
  ADMIN
  SUPER_ADMIN
}

enum VipType {
  BASIC
  PREMIUM
  PLATINUM
}

enum AlbumType {
  SINGLE
  EP
  ALBUM
  COMPILATION
  SOUNDTRACK
}

enum MediaType {
  AUDIO
  VIDEO
}

enum HeartChargeType {
  DAILY_LOGIN
  UPLOAD
  SHARE
  PURCHASE
  BONUS
  SPEND
  REFUND
}
