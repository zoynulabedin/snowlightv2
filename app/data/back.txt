// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// User model with comprehensive fields
model User {
  id       String  @id @default(cuid())
  email    String  @unique
  username String  @unique
  password String
  name     String?
  avatar   String?
  bio      String?

  // Admin Role
  isAdmin Boolean  @default(false)
  role    UserRole @default(USER)

  // VIP Membership
  isVip     Boolean   @default(false)
  vipType   VipType?
  vipExpiry DateTime?

  // Heart System
  hearts Int @default(0)

  // Social Features
  followers Int @default(0)
  following Int @default(0)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  playlists      Playlist[]
  favorites      Favorite[]
  uploads        Upload[]
  heartCharges   HeartCharge[]
  sessions       Session[]
  passwordResets PasswordReset[]
  artistProfile  Artist?
  uploadedSongs  Song[]

  @@map("users")
}

model Artist {
  id         String  @id @default(cuid())
  userId     String? @unique
  name       String
  bio        String?
  avatar     String?
  coverImage String?
  genre      String?
  country    String?
  debutYear  Int?

  // Social Stats
  followers        Int @default(0)
  monthlyListeners Int @default(0)

  // Verification
  isVerified Boolean @default(false)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user         User?         @relation(fields: [userId], references: [id], onDelete: SetNull)
  albumArtists AlbumArtist[]
  songArtists  SongArtist[]
  videoArtists VideoArtist[]

  @@map("artists")
}

model Album {
  id          String    @id @default(cuid())
  title       String
  description String?
  coverImage  String?
  releaseDate DateTime?
  genre       String?
  type        AlbumType @default(ALBUM)

  // Stats
  plays Int @default(0)
  likes Int @default(0)

  // Status
  isPublished Boolean @default(false)
  isApproved  Boolean @default(false)
  isFeatured  Boolean @default(false)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  artists   AlbumArtist[]
  songs     Song[]
  favorites Favorite[]

  @@map("albums")
}

model Song {
  id          String    @id @default(cuid())
  title       String
  duration    Int? // in seconds
  audioUrl    String?
  videoUrl    String?
  lyrics      String?
  genre       String?
  releaseDate DateTime?
  description String?
  language    String? // Korean, English, etc.

  // Media Files
  coverImage String?
  audioFile  String? // Cloudinary URL
  videoFile  String? // Cloudinary URL

  // Stats
  plays     Int @default(0)
  likes     Int @default(0)
  downloads Int @default(0)
  views     Int @default(0)

  // Status
  isPublished Boolean @default(false)
  isApproved  Boolean @default(false)
  isFeatured  Boolean @default(false)

  // Relations
  albumId String?
  album   Album?  @relation(fields: [albumId], references: [id], onDelete: SetNull)

  // Artist Relations
  artists SongArtist[]

  // User Relations
  uploadedById String?
  uploadedBy   User?   @relation(fields: [uploadedById], references: [id], onDelete: SetNull)

  // Video Relations
  videos Video[]

  // Interactions
  favorites     Favorite[]
  playlistItems PlaylistItem[]
  uploads       Upload[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("songs")
}

model Video {
  id           String  @id @default(cuid())
  title        String
  description  String?
  videoUrl     String
  thumbnailUrl String?
  duration     Int? // in seconds
  genre        String?
  language     String?

  // Stats
  views Int @default(0)
  likes Int @default(0)

  // Status
  isPublished Boolean @default(false)
  isApproved  Boolean @default(false)
  isFeatured  Boolean @default(false)
  ageRating   String? // "전체 관람가", "12세 이상", etc.

  // Relations
  songId String?
  song   Song?   @relation(fields: [songId], references: [id], onDelete: SetNull)

  // Artist Relations
  artists VideoArtist[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("videos")
}

model VideoArtist {
  id       String @id @default(cuid())
  videoId  String
  artistId String
  role     String @default("Artist")

  video  Video  @relation(fields: [videoId], references: [id], onDelete: Cascade)
  artist Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)

  @@unique([videoId, artistId])
  @@map("video_artists")
}

model AlbumArtist {
  id       String @id @default(cuid())
  albumId  String
  artistId String
  role     String @default("Artist") // Artist, Producer, Composer, etc.

  album  Album  @relation(fields: [albumId], references: [id], onDelete: Cascade)
  artist Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)

  @@unique([albumId, artistId])
  @@map("album_artists")
}

model SongArtist {
  id       String @id @default(cuid())
  songId   String
  artistId String
  role     String @default("Artist") // Artist, Producer, Composer, Lyricist, etc.

  song   Song   @relation(fields: [songId], references: [id], onDelete: Cascade)
  artist Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)

  @@unique([songId, artistId, role])
  @@map("song_artists")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model PasswordReset {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_resets")
}

model Upload {
  id          String    @id @default(cuid())
  userId      String
  title       String
  artist      String?
  album       String?
  genre       String?
  description String?
  type        MediaType

  // Cloudinary Info
  cloudinaryId  String
  cloudinaryUrl String
  fileSize      Int
  duration      Int?

  // Metadata
  plays Int @default(0)
  likes Int @default(0)

  // Admin Approval
  isApproved Boolean   @default(false)
  approvedBy String?
  approvedAt DateTime?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  favorites Favorite[]
  songId    String?
  song      Song?      @relation(fields: [songId], references: [id], onDelete: SetNull)

  @@map("uploads")
}

model Playlist {
  id          String  @id @default(cuid())
  userId      String
  title       String
  description String?
  isPublic    Boolean @default(true)
  coverImage  String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user  User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items PlaylistItem[]

  @@map("playlists")
}

model PlaylistItem {
  id         String  @id @default(cuid())
  playlistId String
  songId     String?
  uploadId   String?
  position   Int

  // Relations
  playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  song     Song?    @relation(fields: [songId], references: [id], onDelete: Cascade)

  @@unique([playlistId, songId])
  @@unique([playlistId, uploadId])
  @@map("playlist_items")
}

model Favorite {
  id       String  @id @default(cuid())
  userId   String
  songId   String?
  albumId  String?
  uploadId String?

  // Timestamps
  createdAt DateTime @default(now())

  // Relations
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  song   Song?   @relation(fields: [songId], references: [id], onDelete: Cascade)
  album  Album?  @relation(fields: [albumId], references: [id], onDelete: Cascade)
  upload Upload? @relation(fields: [uploadId], references: [id], onDelete: Cascade)

  @@unique([userId, songId])
  @@unique([userId, albumId])
  @@unique([userId, uploadId])
  @@map("favorites")
}

model HeartCharge {
  id     String          @id @default(cuid())
  userId String
  type   HeartChargeType
  amount Int // Hearts charged/used
  reason String? // Optional reason for the charge

  // Timestamps
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("heart_charges")
}

// Enums
enum UserRole {
  USER
  MODERATOR
  ADMIN
}

enum VipType {
  BRONZE
  SILVER
  GOLD
  PLATINUM
}

enum MediaType {
  AUDIO
  VIDEO
  IMAGE
}

enum AlbumType {
  ALBUM
  SINGLE
  EP
  COMPILATION
}

enum Genre {
  KPOP
  JPOP
  POP
  ROCK
  HIPHOP
  RNB
  ELECTRONIC
  BALLAD
  INDIE
  CLASSICAL
  JAZZ
  COUNTRY
  FOLK
  REGGAE
  LATIN
  OTHER
}

enum HeartChargeType {
  EARNED // User earned hearts
  SPENT // User spent hearts
  BONUS // Admin bonus
  PENALTY // Admin penalty
}

model User {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  email    String  @unique
  username String  @unique
  password String
  name     String?
  avatar   String?
  bio      String?

  // Admin Role
  isAdmin Boolean  @default(false)
  role    UserRole @default(USER)

  // VIP Membership
  isVip     Boolean   @default(false)
  vipType   VipType?
  vipExpiry DateTime?

  // Heart System
  hearts Int @default(0)

  // Social Features
  followers Int @default(0)
  following Int @default(0)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  playlists      Playlist[]
  favorites      Favorite[]
  uploads        Upload[]
  heartCharges   HeartCharge[]
  sessions       Session[]
  passwordResets PasswordReset[]
  artistProfile  Artist?
  uploadedSongs  Song[]

  @@map("users")
}

model Artist {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  userId     String? @unique @db.ObjectId
  name       String
  stageName  String?
  bio        String?
  avatar     String?
  coverImage String?
  genre      String?
  country    String?
  debutYear  Int?

  // Social Stats
  followers        Int @default(0)
  monthlyListeners Int @default(0)

  // Verification
  isVerified Boolean @default(false)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user         User?         @relation(fields: [userId], references: [id], onDelete: SetNull)
  albumArtists AlbumArtist[]
  songArtists  SongArtist[]
  videoArtists VideoArtist[]

  @@map("artists")
}

model Album {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  coverImage  String?
  releaseDate DateTime?
  genre       String?
  type        AlbumType @default(ALBUM)

  // Stats
  plays Int @default(0)
  likes Int @default(0)

  // Status
  isPublished Boolean @default(false)
  isApproved  Boolean @default(false)
  isFeatured  Boolean @default(false)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  artists   AlbumArtist[]
  songs     Song[]
  favorites Favorite[]

  @@map("albums")
}

model Song {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  duration    Int? // in seconds
  audioUrl    String?
  videoUrl    String?
  lyrics      String?
  genre       String?
  releaseDate DateTime?
  description String?
  language    String? // Korean, English, etc.

  // Media Files
  coverImage String?
  audioFile  String? // Cloudinary URL
  videoFile  String? // Cloudinary URL

  // Stats
  plays     Int @default(0)
  likes     Int @default(0)
  downloads Int @default(0)
  views     Int @default(0)

  // Status
  isPublished Boolean @default(false)
  isApproved  Boolean @default(false)
  isFeatured  Boolean @default(false)

  // Relations
  albumId String? @db.ObjectId
  album   Album?  @relation(fields: [albumId], references: [id], onDelete: SetNull)

  // Artist Relations
  artists SongArtist[]

  // User Relations
  uploadedById String? @db.ObjectId
  uploadedBy   User?   @relation(fields: [uploadedById], references: [id], onDelete: SetNull)

  // Video Relations
  videos Video[]

  // Interactions
  favorites     Favorite[]
  playlistItems PlaylistItem[]
  uploads       Upload[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("songs")
}

model Video {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String?
  videoUrl     String
  thumbnailUrl String?
  duration     Int? // in seconds
  genre        String?
  language     String?

  // Stats
  views Int @default(0)
  likes Int @default(0)

  // Status
  isPublished Boolean @default(false)
  isApproved  Boolean @default(false)
  isFeatured  Boolean @default(false)
  ageRating   String? // "전체 관람가", "12세 이상", etc.

  // Relations
  songId String? @db.ObjectId
  song   Song?   @relation(fields: [songId], references: [id], onDelete: SetNull)

  // Artist Relations
  artists VideoArtist[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("videos")
}

model VideoArtist {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  videoId  String @db.ObjectId
  artistId String @db.ObjectId
  role     String @default("Artist")

  video  Video  @relation(fields: [videoId], references: [id], onDelete: Cascade)
  artist Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)

  @@unique([videoId, artistId])
  @@map("video_artists")
}

model AlbumArtist {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  albumId  String @db.ObjectId
  artistId String @db.ObjectId
  role     String @default("Artist") // Artist, Producer, Composer, etc.

  album  Album  @relation(fields: [albumId], references: [id], onDelete: Cascade)
  artist Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)

  @@unique([albumId, artistId])
  @@map("album_artists")
}

model SongArtist {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  songId   String @db.ObjectId
  artistId String @db.ObjectId
  role     String @default("Artist") // Artist, Producer, Composer, Lyricist, etc.

  song   Song   @relation(fields: [songId], references: [id], onDelete: Cascade)
  artist Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)

  @@unique([songId, artistId, role])
  @@map("song_artists")
}

model Session {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model PasswordReset {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_resets")
}

model Upload {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String    @db.ObjectId
  title       String
  artist      String?
  album       String?
  genre       String?
  description String?
  type        MediaType

  // Cloudinary Info
  cloudinaryId  String
  cloudinaryUrl String
  fileSize      Int
  duration      Int?

  // Metadata
  plays Int @default(0)
  likes Int @default(0)

  // Admin Approval
  isApproved Boolean   @default(false)
  approvedBy String?
  approvedAt DateTime?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  favorites Favorite[]
  songId    String?    @db.ObjectId
  song      Song?      @relation(fields: [songId], references: [id], onDelete: SetNull)

  @@map("uploads")
}

model Playlist {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  userId      String  @db.ObjectId
  title       String
  description String?
  isPublic    Boolean @default(true)
  coverImage  String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user  User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items PlaylistItem[]

  @@map("playlists")
}

model PlaylistItem {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  playlistId String  @db.ObjectId
  songId     String? @db.ObjectId
  uploadId   String? @db.ObjectId
  position   Int

  // Relations
  playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  song     Song?    @relation(fields: [songId], references: [id], onDelete: Cascade)

  @@unique([playlistId, songId])
  @@unique([playlistId, uploadId])
  @@map("playlist_items")
}

model Favorite {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  userId   String  @db.ObjectId
  songId   String? @db.ObjectId
  albumId  String? @db.ObjectId
  uploadId String? @db.ObjectId

  // Timestamps
  createdAt DateTime @default(now())

  // Relations
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  song   Song?   @relation(fields: [songId], references: [id], onDelete: Cascade)
  album  Album?  @relation(fields: [albumId], references: [id], onDelete: Cascade)
  upload Upload? @relation(fields: [uploadId], references: [id], onDelete: Cascade)

  @@unique([userId, songId])
  @@unique([userId, albumId])
  @@unique([userId, uploadId])
  @@map("favorites")
}

model HeartCharge {
  id     String          @id @default(auto()) @map("_id") @db.ObjectId
  userId String          @db.ObjectId
  type   HeartChargeType
  amount Int
  reason String?

  // Payment tracking
  paymentMethod String?
  paymentAmount Int?

  // Timestamps
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("heart_charges")
}

enum UserRole {
  USER
  MODERATOR
  ADMIN
  SUPER_ADMIN
}

enum VipType {
  BASIC
  PREMIUM
  PLATINUM
}

enum AlbumType {
  SINGLE
  EP
  ALBUM
  COMPILATION
  SOUNDTRACK
}

enum MediaType {
  AUDIO
  VIDEO
}

enum HeartChargeType {
  DAILY_LOGIN
  UPLOAD
  SHARE
  PURCHASE
  BONUS
  SPEND
  REFUND
}
